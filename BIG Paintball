--[[

--> Dumps the tables with a damage constant <--

local string = '---------------------------------------------'

for i, v in next, getgc(true) do
	if type(v) == 'table' and rawget(v, 'damage') then
		for i2, v2 in pairs(v) do
			string = string .. '\n'
			string = string .. tostring(i2) .. ' ' .. tostring(v2) .. '\n'
		end
		string = string .. '\n-------------------------------------\n'
	end
end
writefile('PAINTBALL DUMP.txt', string)
]]--

-- [Delete Invis Walls] --

if workspace.__THINGS.MapCache:FindFirstChild('Ignore') then -- Some maps don't have invis walls :)
	for i, v in next, workspace.__THINGS.MapCache.Ignore:GetChildren() do
		if v.Name == InvisPart then
			v:Destroy()
		end
	end
end
-- [Gun Mods] --

for i, v in next, getgc(true) do
	if type(v) == 'table' and rawget(v, 'damage') then
		v.shotrate = 0.0001
		v.automatic = true
		v.damage = math.huge
		v.velocity = 500
	end
end

-- [Find Character] --

local Character = game.Players.LocalPlayer.Character

if not Character then
	game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
		getgenv().Teleport = true
		getgenv().Aimbot = true
		Character = char
		Character:WaitForChild('Humanoid').Died:Connect(function()
			getgenv().Teleport = false
			getgenv().Aimbot = false
			Character = nil
    	end)
	end)
end

-- Define a coroutine that waits for Character and its HumanoidRootPart
function WaitForCharacter()
    while not Character or not Character:FindFirstChild('HumanoidRootPart') do
        wait()
    end
    return Character
end

-- Wrap the coroutine in a function that can be called later
function GetCharacter()
    return WaitForCharacter()
end

-- [Locals] --

local players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Teams = game:GetService('Teams')
local user_input_service = game:GetService('UserInputService')
local workspace = game:GetService('Workspace')

local camera = workspace.CurrentCamera
local wtvp = camera.WorldToViewportPoint
local localplayer = players.LocalPlayer

--> Chams <--

--> Tracers <--
		
getgenv().Tracers = true
		
local Line = Drawing.new('Line')

spawn(function()
	if getgenv().Tracers then
		for i, v in next, players:GetChildren() do
			Line.Thickness = 3
			Line.Color = Color3.new(1, 0, 0.384313)

			RunService.Heartbeat:Connect(function()
				if v.Character and v.Character:FindFirstChild('Humanoid') and v.Character:FindFirstChild('Humanoid').Health ~= 0 and v.Character:FindFirstChild('HumanoidRootPart') and v ~= localplayer and v.Team ~= localplayer.Team then
					local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
					
					if OnScreen then
						Line.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y * 2)
						Line.To = Vector2.new(Vector.X, Vector.Y)
						Line.Visible = getgenv().Tracers
					else
						Line.Visible = false
					end
				else
					Line.Visible = false
				end
			end)
		end
	end
end)

players.PlayerAdded:Connect(function()
	spawn(function()
		if getgenv().Tracers then
			for i, v in next, players:GetChildren() do
				Line.Thickness = 3
				Line.Color = Color3.new(1, 0, 0.384313)

				RunService.Heartbeat:Connect(function()
					if v.Character and v.Character:FindFirstChild('Humanoid') and v.Character:FindFirstChild('Humanoid').Health ~= 0 and v.Character:FindFirstChild('HumanoidRootPart') and v ~= localplayer and v.Team ~= localplayer.Team then
						local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
						
						if OnScreen then
							Line.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y * 2)
							Line.To = Vector2.new(Vector.X, Vector.Y)
							Line.Visible = getgenv().Tracers
						else
							Line.Visible = false
						end
					else
						Line.Visible = false
					end
				end)
			end
		end
	end)
end)

if Character and Character:FindFirstChild('Humanoid') then
	Character.Humanoid.Died:Connect(function()
		Line.Visible = false
	end)
end

-- [Aimbot] --

getgenv().Aimbot = true

task.spawn(function()
	if getgenv().Aimbot then

		local function indexExists(object, index)
		    local _, value = pcall(function() return object[index] end)
		    return value
		end

		local function get_character(player) return indexExists(player, 'Character') end

		local function get_mouse_location() return user_input_service:GetMouseLocation() end

		local function is_alive(player) return player.Character and player.Character:FindFirstChild('Humanoid') and player.Character:FindFirstChild('Humanoid').Health > 0 end
		local function is_team(player) return #Teams:GetChildren() > 0 and player.Team == localplayer.Team end
		
		--> FOV <--
		
		shared.fov = 800
		local circle = Drawing.new('Circle')
		circle.Thickness = 2
		circle.NumSides = 64
		circle.Radius = shared.fov or 800
		circle.Filled = false
		circle.Transparency = 1
		circle.Color = Color3.new(1, 0, 0.384313)
		circle.Visible = false -- Make it changable
		local target = nil

	--> [Get Closest Player] <--

	local function getClosestPlayerToCursor(fov)

		    local maxDistance = fov or math.huge

		    local closestPlayer = nil
		    local closestPlayerDistance = math.huge

		    for _, player in pairs(players:GetPlayers()) do

			if player ~= localplayer and not is_team(player) and get_character(player) and is_alive(player) and get_character(player).Head then
			    local pos, on_screen = wtvp(camera, get_character(player).Head.Position)

			    if not on_screen then continue end

			    local distance = (get_mouse_location() - Vector2.new(pos.X, pos.Y)).magnitude

			    if distance <= maxDistance and distance < closestPlayerDistance then
				closestPlayer = player
				closestPlayerDistance = distance
			    end
			end
		    end

		return closestPlayer
	end

		RunService.Heartbeat:Connect(function(deltaTime)
		    task.wait(deltaTime ^ 2)
		    target = getClosestPlayerToCursor(shared.fov)
		    circle.Position = get_mouse_location()
		end)

		local OldNamecall
		OldNamecall = hookmetamethod(workspace, '__namecall', newcclosure(function(...)
		    local args = { ... }
		    local method = string.lower(getnamecallmethod())
		    local caller = getcallingscript()
		    if method == 'findpartonraywithwhitelist' and tostring(caller) == 'First Person Controller' then

			local HitPart = target and target.Character and target.Character.Head or nil
			if HitPart then
			    local Origin = HitPart.Position + Vector3.new(0, 5, 0)
			    local Direction = (HitPart.Position - Origin)
			    args[2] = Ray.new(Origin, Direction)

			    return OldNamecall(unpack(args))
			else
			    return OldNamecall(...)
			end
		    end
		    return OldNamecall(...)
		end))
	end
end)

-- [Fly] --

loadstring(game:HttpGet("https://pastebin.com/raw/9tZMx4SW"))()

--> Fly Hook <--

local old;
old = hookmetamethod(game, "__index", function(self, key)
	if not checkcaller() and key == "PlatformStand" and self.ClassName == "Humanoid" and self.Parent and plr.Character and self.Parent == plr.Character then -- Prevents PlatformStanding detections
      return false
	end
	if not checkcaller() and key == "WalkSpeed" and self.ClassName == "Humanoid" and self.Parent and plr.Character and self.Parent == plr.Character then -- Prevents PlatformStanding detections
      return false
	end
	if not checkcaller() and key == "Kick" and self.ClassName == "Humanoid" and self.Parent and plr.Character and self.Parent == plr.Character then -- Prevents PlatformStanding detections
      return false
	end
	return old(self, key)
end)
